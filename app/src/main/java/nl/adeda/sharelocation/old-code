--- FirebaseHelper.initializeMapMarkers ---

public static void initializeMapMarkers(final User userData, final boolean isOtherUser,
                                            final boolean isLastUser, final ArrayList<User> initializedUsers, final ArrayList<User> userList) {
        // Check if user has added a profile picture
        storageRef.child(userData.getUserId()).child("map-size").getDownloadUrl
                ().addOnSuccessListener(new OnSuccessListener<Uri>() {
            @Override
            public void onSuccess(Uri uri) {
                getUserPhoto(userData, isOtherUser, isLastUser, initializedUsers, userList);
            }
        }).addOnFailureListener(new OnFailureListener() { // Return user object without photo
            @Override
            public void onFailure(@NonNull Exception e) {
                if (!isOtherUser) {
                    photoDelegate.initializeCurrentUserMarker(userData, userList);
                } else {
                    if (!isLastUser) {
                        initializedUsers.add(userData);
                    } else {
                        initializedUsers.add(userData);
                        photoDelegate.initializeOtherUserMarkers(initializedUsers);
                    }
                }
            }
        });
    }

--- FirebaseHelper.getUserPhoto ---

private static void getUserPhoto(final User userData, final boolean isOtherUser, final
    boolean isLastUser, final ArrayList<User> initializedUsers, final ArrayList<User> userList) {

        userStorageRef = storageRef.child(userData.getUserId()).child("map-size");

        File profilePhoto = null;
        String filePath = null;

        try {
            profilePhoto = File.createTempFile("profile", ".png");
            filePath = profilePhoto.getPath();
        } catch (IOException e) {
            e.printStackTrace();
        }

        if (profilePhoto == null) {
            return;
        }

        final File finalProfilePhoto = profilePhoto;

        userStorageRef.getFile(profilePhoto).addOnSuccessListener(new OnSuccessListener<FileDownloadTask.TaskSnapshot>() {
            @Override
            public void onSuccess(FileDownloadTask.TaskSnapshot taskSnapshot) {
                userData.setMapPhoto(BitmapFactory.decodeFile(finalProfilePhoto.getPath()));

                if (!isOtherUser) {
                    photoDelegate.initializeCurrentUserMarker(userData, userList);
                } else {
                    if (!isLastUser) {
                        initializedUsers.add(userData);
                    } else {
                        initializedUsers.add(userData);
                        photoDelegate.initializeOtherUserMarkers(initializedUsers);
                    }
                }
            }
        });
    }

--- MapFragment.initializeCurrentUserMarker ---

@Override
    public void initializeCurrentUserMarker(User userData, ArrayList<User> currentUserList) {
        LatLng currentUserLocation = new LatLng(userData.getLatitude(), userData.getLongitude());
        if (userData.getMapPhoto() != null) { // Set photo as icon if it's present
            Bitmap bitmap = userData.getMapPhoto();
            currentMarker = googleMap.addMarker(new MarkerOptions()
                    .position(currentUserLocation)
                    .anchor(0.5f, 0.5f)
                    .icon(BitmapDescriptorFactory.fromBitmap(bitmap)));
        } else { // Set no photo if it's not present
            currentMarker = googleMap.addMarker(new MarkerOptions().position(currentUserLocation)
                    .anchor(0.5f, 0.5f));
        }
        currentMarker.setTitle(userData.getVoornaam()); // TODO: TESTLINE - REMOVE AFTER USE

        // Initialize markers for other users
        FirebaseHelper.getOtherUserMapMarkers(currentUserList);
    }

--- FirebaseHelper.getOtherUserMapMarkers ---
public static void getOtherUserMapMarkers(final ArrayList<User> initUsers) {
        int i = 0;
        ArrayList<User> initializedUsers = new ArrayList<>();
        for (User user : initUsers) {
            i++;
            if (i == initUsers.size()) {
                initializeMapMarkers(user, true, true, initializedUsers, null);
            } else {
                initializeMapMarkers(user, true, false, initializedUsers, null);
            }
        }
    }

--- FirebaseHelper.setTarget ---
public static void setTarget(String url, Context context, final int i, final ArrayList<User> userList) {

        final Target target = new Target() {
            @Override
            public void onBitmapLoaded(Bitmap bitmap, Picasso.LoadedFrom from) {
                userList.get(i).setMapPhoto(bitmap);

                if (i == userList.size()) {
                    photoDelegate.initializeOtherUserMarkers(userList);
                }
            }

            @Override
            public void onBitmapFailed(Drawable drawable) {

            }

            @Override
            public void onPrepareLoad(Drawable drawable) {

            }

        };
        Picasso.with(context).load(url).into(target);
    }
}

--- FirebaseHelper.getOtherUserMapMarkers (2) ---
final int[] i = {0};

        userDataRef.child("map-photos").addListenerForSingleValueEvent(new ValueEventListener() {
            @Override
            public void onDataChange(DataSnapshot dataSnapshot) {

                for (DataSnapshot ds : dataSnapshot.getChildren()) {
                    for (User user : initUsers) {
                        i[0]++;
                        if (user.getUserId().equals(ds.getKey())) {
                            setTarget(ds.getValue().toString(), context, i[0], initUsers);
                        }
                    }
                }
            }

            @Override
            public void onCancelled(DatabaseError databaseError) {
                Log.e("NE", "File does not exist at given location");
            }
        });